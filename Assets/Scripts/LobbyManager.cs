using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using TMPro;
using Unity.Netcode;
using Unity.Netcode.Transports.UTP;
using Unity.Networking.Transport.Relay;
using Unity.Services.Authentication;
using Unity.Services.Core;
using Unity.Services.Lobbies;
using Unity.Services.Lobbies.Models;
using Unity.Services.Relay;
using Unity.Services.Relay.Models;
using UnityEngine;
using UnityEngine.UI;

public class LobbyManager : NetworkBehaviour
{
    //player ID generated by Lobby service
    public string PlayerId { get; private set; }

    //lobby name to display
    private string lobbyName = "TestLobby";

    //max number of players to accept
    private int maxPlayers = 4;

    //lobby button
    public Button lobbyButton;

    //find lobby button
    public Button refreshButton;

    //the lobby object
    private Lobby currentLobby = null;

    //realy allocation
    private Allocation allocation = null;

    //join code of the relay allocation
    string joinCode;

    //duraction in sections to keep lobby alive
    public int lobbyDuration = 300;

    //keep track of the last time time refresh was called
    private float refreshCooldown = 0;

    //lobby entry UI element prefab
    public GameObject lobbyPrefab;

    //lobby list scroller container object
    public GameObject lobbyListParent;

    //the game controller object
    public GameObject gameController;

    //the main lobby UI object
    public GameObject mainLobby;

    //waiting for players... UI object
    public GameObject waitingUI;

    //parent UI object for time remaining display
    public GameObject timerContainer;

    //is lobby being created
    private bool creatingLobby = false;

    //the sound controller
    private SoundController soundController;

    private void Awake()
    {
        //get the sound controller
        soundController = GameObject.FindGameObjectWithTag("SFX").GetComponent<SoundController>();

        //set create and refresh lobby buttons
        lobbyButton.onClick.AddListener(() => {
            soundController.playClick();
            CreateLobby();
        });
        refreshButton.onClick.AddListener(() => {
            soundController.playClick();
            RefreshLobby();
        });
    }

    // Start is called before the first frame update
    async void Start()
    {
        InitializationOptions options = new InitializationOptions();
        string playerName = PlayerPrefs.GetString("playerName", "BoxStrider") + Random.Range(1, 1000);
        options.SetProfile(playerName);

        //wait for unity services
        await UnityServices.InitializeAsync(options);

        //save playerId for public access when signed in
        AuthenticationService.Instance.SignedIn += () =>
        {
            PlayerId = AuthenticationService.Instance.PlayerId;
            maxPlayers = PlayerPrefs.GetInt("maxPlayers", 4);
            lobbyName = playerName + "'s Lobby";
            Debug.Log(PlayerId);
        };

        //sign in anonymously
        await AuthenticationService.Instance.SignInAnonymouslyAsync();
    }

    void Update()
    {
        //decrement refresh cooldown when it's greater than 0
        if(refreshCooldown > 0)
        {
            refreshCooldown -= Time.deltaTime;
        }
    }

    //returns a new player object with player name
    private Player GetPlayer()
    {
        //return a new player object with its player name from playerprefs
        return new Player
        {
            Data = new Dictionary<string, PlayerDataObject>
            {
                {
                    "PlayerName",
                    new PlayerDataObject(PlayerDataObject.VisibilityOptions.Member, PlayerPrefs.GetString("playerName", "BoxStrider"))
                }
            }
        };
    }

    //create a lobby
    private async void CreateLobby(bool isPrivate = false)
    {
        //don't create lobby before a previous attempt is completed
        if (creatingLobby)
            return;
        creatingLobby = true;
        try
        {
            //acquire allocation and its join code
            allocation = await RelayService.Instance.CreateAllocationAsync(PlayerPrefs.GetInt("maxPlayers", 4) - 1);
            joinCode = await RelayService.Instance.GetJoinCodeAsync(allocation.AllocationId);

            //create relay server connection with UDP
            RelayServerData relayServerData = new RelayServerData(allocation, "udp");
            NetworkManager.Singleton.GetComponent<UnityTransport>().SetRelayServerData(relayServerData);

            //start host
            NetworkManager.Singleton.StartHost();
        }
        catch (RelayServiceException ex)
        {
            Debug.Log(ex);
        }

        try
        {
            //initialize lobby options
            //set private depending on function input
            //set player to player settings from GetPlayer
            //set data to have the relay join code
            CreateLobbyOptions options = new CreateLobbyOptions
            {
                IsPrivate = isPrivate,
                Player = GetPlayer(),
                Data = new Dictionary<string, DataObject>
                {
                    { "relayCode", new DataObject(DataObject.VisibilityOptions.Member, joinCode) }
                }
            };

            //asynchronously create new lobby
            currentLobby = await LobbyService.Instance.CreateLobbyAsync(lobbyName, maxPlayers, options);
            Debug.Log(currentLobby.Id);

            //keep lobby alive for lobbyDuration seconds
            StartCoroutine(LobbyKeepAlive());
        }
        //just in case lobby service can't connect
        catch (LobbyServiceException ex)
        {
            Debug.LogException(ex);
        }

        //disable lobby UI
        mainLobby.SetActive(false);

        //start waiting for players
        waitingUI.SetActive(true);

        //show timer container
        timerContainer.SetActive(true);

        //lobby creation done
        creatingLobby = false;
    }

    //join an existing lobby
    public async void JoinLobby(string lobbyId)
    {
        try
        {
            //join lobby with current player name
            JoinLobbyByCodeOptions options = new JoinLobbyByCodeOptions
            {
                Player = GetPlayer()
            };
            currentLobby = await Lobbies.Instance.JoinLobbyByIdAsync(lobbyId);
        }
        //debug log if lobby service doesn't work
        catch (LobbyServiceException ex)
        {
            Debug.LogException(ex);
        }

        try
        {
            //acquire relay code from lobby
            string joinTarget = currentLobby.Data["relayCode"].Value;

            //join with joinCode
            JoinAllocation joinAllocation = await RelayService.Instance.JoinAllocationAsync(joinTarget);

            //create relay server connection with UDP
            RelayServerData relayServerData = new RelayServerData(joinAllocation, "udp");
            NetworkManager.Singleton.GetComponent<UnityTransport>().SetRelayServerData(relayServerData);

            //start client
            NetworkManager.Singleton.StartClient();
        }
        //debug log if lobby service doesn't work
        catch (RelayServiceException ex)
        {
            Debug.Log(ex);
        }
        
        //disable lobby UI
        mainLobby.SetActive(false);

        //start waiting for full lobby
        waitingUI.SetActive(true);

        //show timer container
        timerContainer.SetActive(true);
    }

    //look for open lobbies
    private async void RefreshLobby()
    {
        //check if refresh is on cooldown
        if(refreshCooldown > 0f)
        {
            //don't do anything if it is
            //TODO: replace with coroutine?
            return;
        }

        //destroy all UI objects for open lobbies
        while (lobbyListParent.transform.childCount > 0)
        {
            DestroyImmediate(lobbyListParent.transform.GetChild(0).gameObject);
        }

        //try to look for open lobbies
        try
        {
            //get up to 10 lobbies with available slots
            //sort by last updated (descending) and number of slots (ascending)
            QueryLobbiesOptions options = new QueryLobbiesOptions
            {
                Count = 10,
                Filters = new List<QueryFilter>
                {
                    new QueryFilter(QueryFilter.FieldOptions.AvailableSlots, "0", QueryFilter.OpOptions.GT)
                },
                Order = new List<QueryOrder>
                {
                    new QueryOrder(false, QueryOrder.FieldOptions.LastUpdated),
                    new QueryOrder(true, QueryOrder.FieldOptions.AvailableSlots)
                }
            };

            //acquire a list of all lobbies
            QueryResponse query = await Lobbies.Instance.QueryLobbiesAsync();

            //iterate for each lobby found
            foreach (Lobby foundLobby in query.Results)
            {
                //create a lobby entry UI object
                GameObject lobbyEntry = Instantiate(lobbyPrefab);

                //put it under the scroller container
                lobbyEntry.transform.SetParent(lobbyListParent.transform, false);

                //change its text and target id
                //target id will be used during button click to join a lobby
                lobbyEntry.GetComponentInChildren<LobbyButton>().targetId = foundLobby.Id;
                lobbyEntry.GetComponentInChildren<TextMeshProUGUI>().text = foundLobby.Name;
            }
        }
        //catch lobby service failure
        catch (LobbyServiceException ex)
        {
            Debug.LogException(ex);
        }
        //set refresh cooldown to 1.1 seconds
        //1.1seconds as lobby query rate limit is 1 per second
        refreshCooldown = 1.1f;
    }

    //coroutine to send a heartbeat to host lobby every 10 seconds
    IEnumerator LobbyKeepAlive()
    {
        //do it up until lobby duration is over (timeout)
        //just in case, ensure host lobby exists
        //and make sure that it isn't full (game start on full so no need)
        while (lobbyDuration > 0 && currentLobby != null && currentLobby.Players.Count < 4)
        {
            //subtract by 10 as the heartbeat will happen every 10 seconds
            //rate limit is 5 per 30 sec
            lobbyDuration -= 10;

            //asynchronously run heartbeat
            Task lobbyPing = Task.Run(async () => { await LobbyService.Instance.SendHeartbeatPingAsync(currentLobby.Id); });

            //wait until heartbeat is over
            yield return new WaitUntil(() => lobbyPing.IsCompleted);

            //wait 10 seconds to run this again
            yield return new WaitForSeconds(10f);
        }
    }

    //remove a player from current lobby by ID
    //(not yet used)
    private async void RemovePlayer(string playerId)
    {
        //simply remove current player from current lobby
        try
        {
            await LobbyService.Instance.RemovePlayerAsync(currentLobby.Id, playerId);
        }
        //debug log if lobby service unreachable
        catch (LobbyServiceException ex)
        {
            Debug.LogException(ex);
        }
    }
}
